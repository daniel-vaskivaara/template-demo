apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: python-project
  title: Python Project
  description: Create a Python project with a CI/CD pipeline
  tags:
    - recommended
    - python
spec:
  owner: andy@tanuu.fi
  type: repository
  parameters:
    - title: Provide some simple information
      required:
        - component_id
        - description
        - owner
      properties:
        component_id:
          title: Name
          type: string
          description: Name of the project
          #ui:field: EntityNamePicker
        description:
          title: Description
          type: string
          description: Describe your project
        owner:
          title: Owner
          type: string
          description: Owner of the project
          ui:field: OwnerPicker
          ui:options:
            allowedKinds:
              - Group
  steps:
    - id: template
      name: Fetch Skeleton + Template
      action: fetch:template
      input:
        url: ./skeleton
        copyWithoutRender:
          - .github/workflows/*
        values:
          component_id: ${{ parameters.component_id }}
          description: ${{ parameters.description }}
          destination: https://github.com/tanuudemo/${{ parameters.component_id }}
          owner: ${{ parameters.owner }}

    - id: publish
      name: Publish
      action: publish:github
      input:
        allowedHosts: ["github.com"]
        description: This is ${{ parameters.component_id }}
        repoUrl: 'github.com?repo=${{ parameters.component_id }}&owner=tanuudemo'
        defaultBranch: main
        repoVisibility: public
    - id: argo-webflow
      name: Call Argo webhook
       # Check the plugin documentation for all supported methods and examples:
       # https://www.npmjs.com/package/@roadiehq/scaffolder-backend-module-http-request
      action: http:backstage:request
      input:
         method: 'POST'
         path: /api/proxy/argoevent/argocd-application-creation
         headers:
           content-type: 'application/json'
         body:
           app_name: ${{ parameters.component_id }}

    - id: register
      name: Register
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps.publish.output.repoContentsUrl }}
        catalogInfoPath: "/catalog-info.yaml"

  output:
    links:
      - title: Repository
        url: ${{ steps.publish.output.remoteUrl }}
      - title: Open in catalog
        icon: catalog
        entityRef: ${{ steps.register.output.entityRef }}
